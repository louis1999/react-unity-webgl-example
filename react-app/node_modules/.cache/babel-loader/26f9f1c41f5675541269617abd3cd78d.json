{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUnityContext = void 0;\n\nvar react_1 = require(\"react\");\n\nvar error_messages_1 = require(\"../constants/error-messages\");\n\nvar use_event_system_1 = require(\"./use-event-system\");\n\nvar use_nullable_state_1 = require(\"./use-nullable-state\");\n/**\n * Creates a Unity Context hook.\n * @param unityConfig The Unity Config on which the Unity Context is based.\n * @returns The Unity Context hook.\n */\n\n\nvar useUnityContext = function (unityConfig) {\n  // A reference to the Unity Instance.\n  var _a = (0, use_nullable_state_1.useNullableState)(),\n      unityInstance = _a[0],\n      setUnityInstance = _a[1]; // The Unity Instance's loading progression represents the percentage of the\n  // Unity Instance's loading process that has been completed.\n\n\n  var _b = (0, react_1.useState)(0),\n      loadingProgression = _b[0],\n      setLoadingProgression = _b[1]; // Defines whether the Unity Instance has been loaded.\n\n\n  var _c = (0, react_1.useState)(false),\n      isLoaded = _c[0],\n      setIsLoaded = _c[1]; // May contain an error that occurred during the initialisation of the Unity\n  // Instance.\n\n\n  var _d = (0, use_nullable_state_1.useNullableState)(),\n      initialisationError = _d[0],\n      setInitialisationError = _d[1];\n  /**\n   * The Unity Context's event system stores the event listeners which will\n   * allow Unity or any global source to invoke events to the React application.\n   */\n\n\n  var eventSystem = (0, use_event_system_1.useEventSystem)();\n  /**\n   * The Unity Context returns a Unity Provider instance. This is an immutable\n   * object that contains a series of methods and properties that are used to\n   * alter the Unity Context state externally.\n   */\n\n  var unityProvider = (0, react_1.useRef)({\n    setLoadingProgression: setLoadingProgression,\n    setInitialisationError: setInitialisationError,\n    setUnityInstance: setUnityInstance,\n    setIsLoaded: setIsLoaded,\n    unityConfig: unityConfig\n  });\n  /**\n   * Enables or disabled the Fullscreen mode of the Unity Instance.\n   */\n\n  var requestFullscreen = (0, react_1.useCallback)(\n  /**\n   * @param enabled Defines whether Unity should be in fullscreen.\n   */\n  function (enabled) {\n    if (unityInstance === null) {\n      // Guarding the Unity Instance.\n      console.warn(error_messages_1.errorMessages.requestFullscreenNoUnityInstance);\n      return;\n    } // For undocumented reasons, the fullscreen mode can only be enabled\n    // with an interger value where the value of \"1\" enables the fullscreen\n    // mode and the value of \"0\" disables the fullscreen mode.\n\n\n    unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n  }, [unityInstance]);\n  /**\n   * Lets you asynchronously ask for the pointer to be locked on the given Unity\n   * Application's Canvas Element.\n   */\n\n  var requestPointerLock = (0, react_1.useCallback)(function () {\n    if (unityInstance === null || typeof unityInstance.Module.canvas === \"undefined\") {\n      // Guarding the Unity Instance and the canvas.\n      console.warn(error_messages_1.errorMessages.requestPointerLockNoUnityInstanceOrCanvas);\n      return;\n    } // Requesting the pointer lock.\n\n\n    return unityInstance.Module.canvas.requestPointerLock();\n  }, [unityInstance]);\n  /**\n   * Sends a message to the UnityInstance to invoke a public method.\n   */\n\n  var sendMessage = (0, react_1.useCallback)(\n  /**\n   * @param gameObjectName the name of the game object in your Unity scene.\n   * @param methodName the name of the public method on the game object.\n   * @param parameter an optional parameter to pass along to the method.\n   */\n  function (gameObjectName, methodName, parameter) {\n    if (unityInstance === null) {\n      // Guarding the Unity Instance.\n      console.warn(error_messages_1.errorMessages.sendMessageNoUnityInstance);\n      return;\n    }\n\n    unityInstance.SendMessage(gameObjectName, methodName, parameter);\n  }, [unityInstance]);\n  /**\n   * Takes a screenshot of the Unity Instance and returns a base64 encoded\n   * string.\n   */\n\n  var takeScreenshot = (0, react_1.useCallback)(\n  /**\n   * @param dataType Defines the type of screenshot to take.\n   * @param quality Defines the quality of the screenshot.\n   * @returns A base 64 encoded string of the screenshot.\n   */\n  function (dataType, quality) {\n    if (unityInstance === null || typeof unityInstance.Module.canvas === \"undefined\") {\n      // Guarding the Unity Instance and the canvas.\n      console.warn(error_messages_1.errorMessages.screenshotNoUnityInstanceOrCanvas);\n      return;\n    } // Takes a screenshot by converting Canvas's render-context's buffer into\n    // a Data URL of the specified data type and quality.\n\n\n    return unityInstance.Module.canvas.toDataURL(dataType, quality);\n  }, [unityInstance]);\n  /**\n   * Requests the UnityInstance to be unloaded from memory in order to be\n   * unmounted from the DOM.\n   */\n\n  var unload = (0, react_1.useCallback)(\n  /**\n   * @returns A promise that resolves when the UnityInstance has been unloaded.\n   */\n  function () {\n    if (unityInstance === null) {\n      // Guarding the Unity Instance.\n      console.warn(error_messages_1.errorMessages.quitNoUnityInstance);\n      return Promise.reject();\n    }\n\n    return unityInstance.Quit();\n  }, [unityInstance]); // Effect invoked when the loading progression changes. When the loading\n  // progression is equal to or more than 1, the Unity Instance is considered\n  // loaded. This will update the isLoaded state.\n\n  (0, react_1.useEffect)(function () {\n    setIsLoaded(loadingProgression === 1);\n  }, [loadingProgression]); // Returns the Unity Context Hook.\n\n  return {\n    unityProvider: unityProvider.current,\n    loadingProgression: loadingProgression,\n    initialisationError: initialisationError,\n    isLoaded: isLoaded,\n    requestFullscreen: requestFullscreen,\n    requestPointerLock: requestPointerLock,\n    sendMessage: sendMessage,\n    unload: unload,\n    takeScreenshot: takeScreenshot,\n    addEventListener: eventSystem.addEventListener,\n    removeEventListener: eventSystem.removeEventListener\n  };\n};\n\nexports.useUnityContext = useUnityContext;","map":{"version":3,"names":["Object","defineProperty","exports","value","useUnityContext","react_1","require","error_messages_1","use_event_system_1","use_nullable_state_1","unityConfig","_a","useNullableState","unityInstance","setUnityInstance","_b","useState","loadingProgression","setLoadingProgression","_c","isLoaded","setIsLoaded","_d","initialisationError","setInitialisationError","eventSystem","useEventSystem","unityProvider","useRef","requestFullscreen","useCallback","enabled","console","warn","errorMessages","requestFullscreenNoUnityInstance","SetFullscreen","requestPointerLock","Module","canvas","requestPointerLockNoUnityInstanceOrCanvas","sendMessage","gameObjectName","methodName","parameter","sendMessageNoUnityInstance","SendMessage","takeScreenshot","dataType","quality","screenshotNoUnityInstanceOrCanvas","toDataURL","unload","quitNoUnityInstance","Promise","reject","Quit","useEffect","current","addEventListener","removeEventListener"],"sources":["/Users/louisdaisomont/Desktop/tuto-react-unity-webgl/react-app/node_modules/react-unity-webgl/distribution/hooks/use-unity-context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useUnityContext = void 0;\nvar react_1 = require(\"react\");\nvar error_messages_1 = require(\"../constants/error-messages\");\nvar use_event_system_1 = require(\"./use-event-system\");\nvar use_nullable_state_1 = require(\"./use-nullable-state\");\n/**\n * Creates a Unity Context hook.\n * @param unityConfig The Unity Config on which the Unity Context is based.\n * @returns The Unity Context hook.\n */\nvar useUnityContext = function (unityConfig) {\n    // A reference to the Unity Instance.\n    var _a = (0, use_nullable_state_1.useNullableState)(), unityInstance = _a[0], setUnityInstance = _a[1];\n    // The Unity Instance's loading progression represents the percentage of the\n    // Unity Instance's loading process that has been completed.\n    var _b = (0, react_1.useState)(0), loadingProgression = _b[0], setLoadingProgression = _b[1];\n    // Defines whether the Unity Instance has been loaded.\n    var _c = (0, react_1.useState)(false), isLoaded = _c[0], setIsLoaded = _c[1];\n    // May contain an error that occurred during the initialisation of the Unity\n    // Instance.\n    var _d = (0, use_nullable_state_1.useNullableState)(), initialisationError = _d[0], setInitialisationError = _d[1];\n    /**\n     * The Unity Context's event system stores the event listeners which will\n     * allow Unity or any global source to invoke events to the React application.\n     */\n    var eventSystem = (0, use_event_system_1.useEventSystem)();\n    /**\n     * The Unity Context returns a Unity Provider instance. This is an immutable\n     * object that contains a series of methods and properties that are used to\n     * alter the Unity Context state externally.\n     */\n    var unityProvider = (0, react_1.useRef)({\n        setLoadingProgression: setLoadingProgression,\n        setInitialisationError: setInitialisationError,\n        setUnityInstance: setUnityInstance,\n        setIsLoaded: setIsLoaded,\n        unityConfig: unityConfig,\n    });\n    /**\n     * Enables or disabled the Fullscreen mode of the Unity Instance.\n     */\n    var requestFullscreen = (0, react_1.useCallback)(\n    /**\n     * @param enabled Defines whether Unity should be in fullscreen.\n     */\n    function (enabled) {\n        if (unityInstance === null) {\n            // Guarding the Unity Instance.\n            console.warn(error_messages_1.errorMessages.requestFullscreenNoUnityInstance);\n            return;\n        }\n        // For undocumented reasons, the fullscreen mode can only be enabled\n        // with an interger value where the value of \"1\" enables the fullscreen\n        // mode and the value of \"0\" disables the fullscreen mode.\n        unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n    }, [unityInstance]);\n    /**\n     * Lets you asynchronously ask for the pointer to be locked on the given Unity\n     * Application's Canvas Element.\n     */\n    var requestPointerLock = (0, react_1.useCallback)(function () {\n        if (unityInstance === null ||\n            typeof unityInstance.Module.canvas === \"undefined\") {\n            // Guarding the Unity Instance and the canvas.\n            console.warn(error_messages_1.errorMessages.requestPointerLockNoUnityInstanceOrCanvas);\n            return;\n        }\n        // Requesting the pointer lock.\n        return unityInstance.Module.canvas.requestPointerLock();\n    }, [unityInstance]);\n    /**\n     * Sends a message to the UnityInstance to invoke a public method.\n     */\n    var sendMessage = (0, react_1.useCallback)(\n    /**\n     * @param gameObjectName the name of the game object in your Unity scene.\n     * @param methodName the name of the public method on the game object.\n     * @param parameter an optional parameter to pass along to the method.\n     */\n    function (gameObjectName, methodName, parameter) {\n        if (unityInstance === null) {\n            // Guarding the Unity Instance.\n            console.warn(error_messages_1.errorMessages.sendMessageNoUnityInstance);\n            return;\n        }\n        unityInstance.SendMessage(gameObjectName, methodName, parameter);\n    }, [unityInstance]);\n    /**\n     * Takes a screenshot of the Unity Instance and returns a base64 encoded\n     * string.\n     */\n    var takeScreenshot = (0, react_1.useCallback)(\n    /**\n     * @param dataType Defines the type of screenshot to take.\n     * @param quality Defines the quality of the screenshot.\n     * @returns A base 64 encoded string of the screenshot.\n     */\n    function (dataType, quality) {\n        if (unityInstance === null ||\n            typeof unityInstance.Module.canvas === \"undefined\") {\n            // Guarding the Unity Instance and the canvas.\n            console.warn(error_messages_1.errorMessages.screenshotNoUnityInstanceOrCanvas);\n            return;\n        }\n        // Takes a screenshot by converting Canvas's render-context's buffer into\n        // a Data URL of the specified data type and quality.\n        return unityInstance.Module.canvas.toDataURL(dataType, quality);\n    }, [unityInstance]);\n    /**\n     * Requests the UnityInstance to be unloaded from memory in order to be\n     * unmounted from the DOM.\n     */\n    var unload = (0, react_1.useCallback)(\n    /**\n     * @returns A promise that resolves when the UnityInstance has been unloaded.\n     */\n    function () {\n        if (unityInstance === null) {\n            // Guarding the Unity Instance.\n            console.warn(error_messages_1.errorMessages.quitNoUnityInstance);\n            return Promise.reject();\n        }\n        return unityInstance.Quit();\n    }, [unityInstance]);\n    // Effect invoked when the loading progression changes. When the loading\n    // progression is equal to or more than 1, the Unity Instance is considered\n    // loaded. This will update the isLoaded state.\n    (0, react_1.useEffect)(function () {\n        setIsLoaded(loadingProgression === 1);\n    }, [loadingProgression]);\n    // Returns the Unity Context Hook.\n    return {\n        unityProvider: unityProvider.current,\n        loadingProgression: loadingProgression,\n        initialisationError: initialisationError,\n        isLoaded: isLoaded,\n        requestFullscreen: requestFullscreen,\n        requestPointerLock: requestPointerLock,\n        sendMessage: sendMessage,\n        unload: unload,\n        takeScreenshot: takeScreenshot,\n        addEventListener: eventSystem.addEventListener,\n        removeEventListener: eventSystem.removeEventListener,\n    };\n};\nexports.useUnityContext = useUnityContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}